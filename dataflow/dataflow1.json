{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "csv",
						"type": "DatasetReference"
					},
					"name": "blobStorage"
				},
				{
					"dataset": {
						"referenceName": "CosmosDbNoSqlContainer2",
						"type": "DatasetReference"
					},
					"name": "productNoSql"
				},
				{
					"dataset": {
						"referenceName": "NoSqlrealistic_customers",
						"type": "DatasetReference"
					},
					"name": "realisticustomers"
				},
				{
					"name": "orders"
				},
				{
					"dataset": {
						"referenceName": "orderDetails",
						"type": "DatasetReference"
					},
					"name": "orderdetail"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "phoneNumberCleaning",
					"description": "Creating new column with formatted phone number"
				},
				{
					"name": "phoneNumber",
					"description": "Creating new column with formatted phone number"
				},
				{
					"name": "joinHitoricalAndCurrentDate"
				},
				{
					"name": "extractingUserData"
				},
				{
					"name": "renameing"
				},
				{
					"name": "fetchingAlternativeEmailInfo"
				},
				{
					"name": "orderJoin"
				},
				{
					"name": "CalculatingOrderTotal"
				},
				{
					"name": "orderSelect"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          Name as string,",
				"          Email as string,",
				"          Phone as string,",
				"          LastPurchaseDate as string,",
				"          TotalSpent as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> blobStorage",
				"source(output(",
				"          ProductID as integer,",
				"          ProductName as string,",
				"          Price as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'document') ~> productNoSql",
				"source(output(",
				"          CustomerID as integer,",
				"          Profile as (FirstName as string, LastName as string, Email as string),",
				"          Conversations as (ConversationID as string, Messages as (DateTime as string, Sender as string, Message as string)[])[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'document') ~> realisticustomers",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false) ~> orders",
				"source(output(",
				"          orderdetailid as integer,",
				"          orderid as integer,",
				"          productid as integer,",
				"          quantity as integer,",
				"          price as decimal(10,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> orderdetail",
				"blobStorage derive(Phone = iif(",
				"    length(replace(replace(replace(replace(Phone, \"(\", \"\"), \")\", \"\"), \"-\", \"\"), \" \", \"\")) == 10, ",
				"    replace(replace(replace(replace(Phone, \"(\", \"\"), \")\", \"\"), \"-\", \"\"), \" \", \"\"), ",
				"    ''",
				")) ~> phoneNumberCleaning",
				"phoneNumberCleaning derive(Phone = \"(\" + substring(Phone, 0, 3) + \") \" + substring(Phone, 3, 3) + \"-\" + substring(Phone, 6, 4),",
				"          CustomerID = toInteger(CustomerID)) ~> phoneNumber",
				"phoneNumber, realisticustomers join(select1@CustomerID == realisticustomers@CustomerID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinHitoricalAndCurrentDate",
				"joinHitoricalAndCurrentDate derive(CustomerID = iif(isNull(realisticustomers@CustomerID), select1@CustomerID, realisticustomers@CustomerID),",
				"          Name = iif(isNull(Profile.FirstName), Name, Profile.FirstName),",
				"          Profile = iif(isNull(Profile.LastName), Name, Profile.LastName),",
				"          Email = iif(isNull(Profile.Email), Email, Profile.Email),",
				"          Phone = iif(isNull(Phone), \"000-000-0000\", Phone)) ~> extractingUserData",
				"extractingUserData select(mapColumn(",
				"          CustomerID,",
				"          firstNmae = Name,",
				"          lastname = Profile,",
				"          phoneNumber = Phone,",
				"          primaryEmail = Email",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renameing",
				"blobStorage select(mapColumn(",
				"          customerID = CustomerID,",
				"          alternativeEmail = Email",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> fetchingAlternativeEmailInfo",
				"orders, orderdetail join(orders@orderid == orderdetail@orderid,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> orderJoin",
				"orderJoin derive(price = price*quantity) ~> CalculatingOrderTotal",
				"CalculatingOrderTotal select(mapColumn(",
				"          orderId = orders@orderid,",
				"          customerId = customerid,",
				"          date = orderdate,",
				"          paymentStatus = paymentstatus,",
				"          orderdetailid,",
				"          orderid,",
				"          productid,",
				"          quantity,",
				"          price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> orderSelect",
				"realisticustomers select(mapColumn(",
				"          CustomerID,",
				"          converstationId = Conversations[1].ConversationID,",
				"          messageSender = Conversations[1].Messages[1].Sender,",
				"          Message = Conversations[1].Messages[1].Message,",
				"          timeStamp = Conversations[1].Messages[1].DateTime",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1"
			]
		}
	}
}