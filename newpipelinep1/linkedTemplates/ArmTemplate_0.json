{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "newpipelinep1"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"CosmosDbNoSql1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDbNoSql1'"
		},
		"PostgreSql1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'PostgreSql1'"
		},
		"SqlServer_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer'"
		},
		"clusterforpg_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'clusterforpg'"
		},
		"PostgreSql1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "c-clusterforpg.whcvz4km7rmw4y.postgres.cosmos.azure.com"
		},
		"PostgreSql1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "citus"
		},
		"PostgreSql1_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "citus"
		},
		"SqlServer_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "globaltech.database.windows.net"
		},
		"SqlServer_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "warehouse"
		},
		"SqlServer_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "CloudSAcea8397d"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbNoSql1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDbNoSql1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PostgreSql1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "PostgreSqlV2",
				"typeProperties": {
					"server": "[parameters('PostgreSql1_properties_typeProperties_server')]",
					"port": 5432,
					"database": "[parameters('PostgreSql1_properties_typeProperties_database')]",
					"username": "[parameters('PostgreSql1_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('PostgreSql1_password')]"
					},
					"sslMode": 2,
					"authenticationType": "Basic"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServer_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/clusterforpg')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"version": "1.0",
				"typeProperties": {
					"connectionString": "[parameters('clusterforpg_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzurePostgreSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "clusterforpg",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "orderid",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "customerid",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "orderdate",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "paymentstatus",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/clusterforpg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbNoSqlContainer1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDbNoSql1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"ProductID": {
							"type": "integer"
						},
						"ProductName": {
							"type": "string"
						},
						"Price": {
							"type": "number"
						}
					}
				},
				"typeProperties": {
					"collectionName": "product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDbNoSql1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDbNoSqlContainer2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDbNoSql1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"ProductID": {
							"type": "integer"
						},
						"ProductName": {
							"type": "string"
						},
						"Price": {
							"type": "number"
						}
					}
				},
				"typeProperties": {
					"collectionName": "product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDbNoSql1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NoSqlrealistic_customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDbNoSql1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"CustomerID": {
							"type": "integer"
						},
						"Profile": {
							"type": "object",
							"properties": {
								"FirstName": {
									"type": "string"
								},
								"LastName": {
									"type": "string"
								},
								"Email": {
									"type": "string"
								}
							}
						},
						"Conversations": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"ConversationID": {
										"type": "string"
									},
									"Messages": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"DateTime": {
													"type": "string"
												},
												"Sender": {
													"type": "string"
												},
												"Message": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"typeProperties": {
					"collectionName": "realistic_customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDbNoSql1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "order_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "payment_status",
						"type": "varchar"
					},
					{
						"name": "order_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "order_total",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "order_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "payment_status",
						"type": "varchar"
					},
					{
						"name": "order_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "order_total",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "first_name",
						"type": "varchar"
					},
					{
						"name": "last_name",
						"type": "varchar"
					},
					{
						"name": "primary_email",
						"type": "varchar"
					},
					{
						"name": "phone_number",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "alternate_email_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "email_address",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "alternate_email"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "message_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "conversation_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "support_agent",
						"type": "varchar"
					},
					{
						"name": "message_sender",
						"type": "varchar"
					},
					{
						"name": "message",
						"type": "text"
					},
					{
						"name": "timestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "conversation_messages"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/convo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "conversation_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_id",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "conversations"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "realistic_customers.csv",
						"container": "globaltechhistoricaldata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Phone",
						"type": "String"
					},
					{
						"name": "LastPurchaseDate",
						"type": "String"
					},
					{
						"name": "TotalSpent",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/orderDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "clusterforpg",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "orderdetailid",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "orderid",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "productid",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quantity",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "price",
						"type": "numeric",
						"precision": 10,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "orderdetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/clusterforpg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "csv",
								"type": "DatasetReference"
							},
							"name": "blobStorage"
						},
						{
							"dataset": {
								"referenceName": "CosmosDbNoSqlContainer2",
								"type": "DatasetReference"
							},
							"name": "productNoSql"
						},
						{
							"dataset": {
								"referenceName": "NoSqlrealistic_customers",
								"type": "DatasetReference"
							},
							"name": "realisticustomers"
						},
						{
							"dataset": {
								"referenceName": "AzurePostgreSqlTable1",
								"type": "DatasetReference"
							},
							"name": "orders"
						},
						{
							"dataset": {
								"referenceName": "orderDetails",
								"type": "DatasetReference"
							},
							"name": "orderdetail"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlServerTable3",
								"type": "DatasetReference"
							},
							"name": "customerInfoSink"
						},
						{
							"dataset": {
								"referenceName": "SqlServerTable2",
								"type": "DatasetReference"
							},
							"name": "orderSink"
						},
						{
							"dataset": {
								"referenceName": "SqlServerTable4",
								"type": "DatasetReference"
							},
							"name": "alternativeEmailSink"
						},
						{
							"dataset": {
								"referenceName": "convo",
								"type": "DatasetReference"
							},
							"name": "conversationInfo"
						},
						{
							"dataset": {
								"referenceName": "SqlServerTable5",
								"type": "DatasetReference"
							},
							"name": "messageInfo"
						}
					],
					"transformations": [
						{
							"name": "phoneNumberCleaning",
							"description": "Creating new column with formatted phone number"
						},
						{
							"name": "phoneNumber",
							"description": "Creating new column with formatted phone number"
						},
						{
							"name": "joinHitoricalAndCurrentDate"
						},
						{
							"name": "extractingUserData"
						},
						{
							"name": "renaming"
						},
						{
							"name": "fetchingAlternativeEmailInfo"
						},
						{
							"name": "orderJoin"
						},
						{
							"name": "CalculatingOrderTotal"
						},
						{
							"name": "orderSelect"
						},
						{
							"name": "selectConversations"
						},
						{
							"name": "select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "AlterRow3"
						},
						{
							"name": "AlterRow4"
						},
						{
							"name": "AlterRow5"
						},
						{
							"name": "convertCustomerIdToInt"
						},
						{
							"name": "ConversationIdToInt"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as string,",
						"          Name as string,",
						"          Email as string,",
						"          Phone as string,",
						"          LastPurchaseDate as string,",
						"          TotalSpent as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> blobStorage",
						"source(output(",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          Price as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'document') ~> productNoSql",
						"source(output(",
						"          CustomerID as integer,",
						"          Profile as (FirstName as string, LastName as string, Email as string),",
						"          Conversations as (ConversationID as string, Messages as (DateTime as string, Sender as string, Message as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'document') ~> realisticustomers",
						"source(output(",
						"          orderid as integer,",
						"          customerid as integer,",
						"          orderdate as timestamp,",
						"          paymentstatus as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> orders",
						"source(output(",
						"          orderdetailid as integer,",
						"          orderid as integer,",
						"          productid as integer,",
						"          quantity as integer,",
						"          price as decimal(10,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> orderdetail",
						"blobStorage derive(Phone = iif(",
						"    length(replace(replace(replace(replace(Phone, \"(\", \"\"), \")\", \"\"), \"-\", \"\"), \" \", \"\")) == 10, ",
						"    replace(replace(replace(replace(Phone, \"(\", \"\"), \")\", \"\"), \"-\", \"\"), \" \", \"\"), ",
						"    ''",
						")) ~> phoneNumberCleaning",
						"phoneNumberCleaning derive(Phone = \"(\" + substring(Phone, 0, 3) + \") \" + substring(Phone, 3, 3) + \"-\" + substring(Phone, 6, 4),",
						"          CustomerID = toInteger(CustomerID)) ~> phoneNumber",
						"phoneNumber, realisticustomers join(phoneNumber@CustomerID == realisticustomers@CustomerID,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinHitoricalAndCurrentDate",
						"joinHitoricalAndCurrentDate derive(CustomerID = iif(isNull(realisticustomers@CustomerID), phoneNumber@CustomerID, realisticustomers@CustomerID),",
						"          Name = /* iif(isNull(Profile.FirstName), Name, Profile.FirstName) */",
						"",
						"iif(",
						"  isNull(Profile.FirstName),",
						"  split(Name, ' ')[0],",
						"  Profile.FirstName",
						"),",
						"          Profile = /* iif(isNull(Profile.LastName), Name, Profile.LastName) */",
						"",
						"iif(",
						"  isNull(Profile.LastName),",
						"  split(Name, ' ')[0],",
						"  Profile.LastName",
						"),",
						"          Email = iif(isNull(Profile.Email), Email, Profile.Email),",
						"          Phone = iif(isNull(Phone), \"000-000-0000\", Phone)) ~> extractingUserData",
						"extractingUserData select(mapColumn(",
						"          CustomerID,",
						"          firstNmae = Name,",
						"          lastname = Profile,",
						"          phoneNumber = Phone,",
						"          primaryEmail = Email",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> renaming",
						"convertCustomerIdToInt select(mapColumn(",
						"          customerID = CustomerID,",
						"          alternativeEmail = Email",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> fetchingAlternativeEmailInfo",
						"orders, orderdetail join(orders@orderid == orderdetail@orderid,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> orderJoin",
						"orderJoin derive(price = toInteger(price*quantity)) ~> CalculatingOrderTotal",
						"CalculatingOrderTotal select(mapColumn(",
						"          orderId = orders@orderid,",
						"          customerId = customerid,",
						"          orderTotal = price,",
						"          date = orderdate,",
						"          paymentStatus = paymentstatus",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> orderSelect",
						"ConversationIdToInt select(mapColumn(",
						"          CustomerID,",
						"          converstationId = Conversations[1].ConversationID,",
						"          messageSender = Conversations[1].Messages[1].Sender,",
						"          Message = Conversations[1].Messages[1].Message,",
						"          timeStamp = Conversations[1].Messages[1].DateTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectConversations",
						"selectConversations select(mapColumn(",
						"          CustomerID,",
						"          converstationId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"renaming alterRow(upsertIf(true())) ~> AlterRow1",
						"orderSelect alterRow(upsertIf(true())) ~> AlterRow2",
						"selectConversations alterRow(upsertIf(true())) ~> AlterRow3",
						"select1 alterRow(upsertIf(true())) ~> AlterRow4",
						"fetchingAlternativeEmailInfo alterRow(upsertIf(true())) ~> AlterRow5",
						"blobStorage derive(CustomerID = toInteger(CustomerID)) ~> convertCustomerIdToInt",
						"realisticustomers derive(Conversations = toInteger(Conversations.ConversationID)) ~> ConversationIdToInt",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_id as integer,",
						"          first_name as string,",
						"          last_name as string,",
						"          primary_email as string,",
						"          phone_number as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customer_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          customer_id = CustomerID,",
						"          first_name = firstNmae,",
						"          last_name = lastname,",
						"          primary_email = primaryEmail,",
						"          phone_number = phoneNumber",
						"     )) ~> customerInfoSink",
						"AlterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          order_id as integer,",
						"          customer_id as integer,",
						"          payment_status as string,",
						"          order_date as timestamp,",
						"          order_total as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['order_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          order_id = orderId,",
						"          customer_id = customerId,",
						"          payment_status = paymentStatus,",
						"          order_date = date,",
						"          order_total = orderTotal",
						"     )) ~> orderSink",
						"AlterRow5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          alternate_email_id as integer,",
						"          customer_id as integer,",
						"          email_address as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customer_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          customer_id = customerID,",
						"          email_address = alternativeEmail",
						"     )) ~> alternativeEmailSink",
						"AlterRow4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          conversation_id as integer,",
						"          customer_id as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['conversation_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          conversation_id = converstationId,",
						"          customer_id = CustomerID",
						"     )) ~> conversationInfo",
						"AlterRow3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          message_id as integer,",
						"          conversation_id as integer,",
						"          support_agent as string,",
						"          message_sender as string,",
						"          message as string,",
						"          timestamp as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['message_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          message_id = CustomerID,",
						"          conversation_id = converstationId,",
						"          message_sender = messageSender,",
						"          message = Message,",
						"          timestamp = timeStamp",
						"     )) ~> messageInfo"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csv')]",
				"[concat(variables('factoryId'), '/datasets/CosmosDbNoSqlContainer2')]",
				"[concat(variables('factoryId'), '/datasets/NoSqlrealistic_customers')]",
				"[concat(variables('factoryId'), '/datasets/AzurePostgreSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/orderDetails')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable3')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable2')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable4')]",
				"[concat(variables('factoryId'), '/datasets/convo')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable5')]"
			]
		}
	]
}